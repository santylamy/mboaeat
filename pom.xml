<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mboaeat</groupId>
  <artifactId>mboaeat-parent</artifactId>
  <version>1.1</version>
    <modules>
        <module>account-api</module>
		<module>mboaeat-shared</module>
		<module>mboaeat-common</module>
		<module>customer-api</module>
        <module>gateway-service</module>
        <module>order-api</module>
    </modules>
    <packaging>pom</packaging>
  
  	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR6</spring-cloud.version>
		<logstash.version>4.11</logstash.version>
		<testcontainers.version>1.48</testcontainers.version>
		<springdoc.version>1.1.49</springdoc.version>
		<embedded-consul.version>2.1.4</embedded-consul.version>
		<awaitility.version>1.7.0</awaitility.version>
		<junit-jupiter.version>5.3.2</junit-jupiter.version>
		<micrometer.version>1.3.10</micrometer.version>
		<micrometer-core.version>1.5.2</micrometer-core.version>

		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>

		<docker.image.prefix>mboaeat</docker.image.prefix>
		<docker.image.exposed.port>9090</docker.image.exposed.port>
		<docker.image.dockerfile.dir>${basedir}</docker.image.dockerfile.dir>
		<docker.image.dockerize.version>v0.6.1</docker.image.dockerize.version>
		<docker.plugin.version>1.2.0</docker.plugin.version>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
        <relativePath/>
	</parent>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.playtika.testcontainers</groupId>
				<artifactId>testcontainers-spring-boot</artifactId>
				<version>${testcontainers.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.session</groupId>
				<artifactId>spring-session-bom</artifactId>
				<version>Corn-SR2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.projectreactor</groupId>
				<artifactId>reactor-bom</artifactId>
				<version>Dysprosium-SR10</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.playtika.testcontainers</groupId>
				<artifactId>embedded-postgresql</artifactId>
				<version>${testcontainers.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>net.minidev</groupId>
				<artifactId>minidev-parent</artifactId>
				<version>2.3</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springdoc</groupId>
				<artifactId>springdoc-openapi-core</artifactId>
				<version>${springdoc.version}</version>
			</dependency>
			<dependency>
				<groupId>net.logstash.logback</groupId>
				<artifactId>logstash-logback-encoder</artifactId>
				<version>${logstash.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mboaeat</groupId>
				<artifactId>mboaeat-shared</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mboaeat</groupId>
				<artifactId>mboaeat-shared</artifactId>
				<version>${project.version}</version>
				<classifier>tests</classifier>
			</dependency>
			<dependency>
				<groupId>com.mboaeat</groupId>
				<artifactId>mboaeat-common</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.jayway.awaitility</groupId>
				<artifactId>awaitility</artifactId>
				<version>${awaitility.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.pszymczyk.consul</groupId>
				<artifactId>embedded-consul</artifactId>
				<version>${embedded-consul.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>net.minidev</groupId>
				<artifactId>asm</artifactId>
				<version>1.0.2</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>springboot</id>
			<activation>
				<file>
					<!-- Just a way to identify a Spring Boot application -->
					<exists>src/main/resources/bootstrap.yml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<fork>true</fork>
							<!-- Layered jars optimizes Docker images -->
							<layers>
								<enabled>true</enabled>
							</layers>
						</configuration>
						<executions>
							<execution>
								<!-- Spring Boot Actuator displays build-related information if a META-INF/build-info.properties file is present -->
								<goals>
									<goal>build-info</goal>
								</goals>
								<configuration>
									<additionalProperties>
										<encoding.source>${project.build.sourceEncoding}</encoding.source>
										<encoding.reporting>${project.reporting.outputEncoding}</encoding.reporting>
										<java.source>${maven.compiler.source}</java.source>
										<java.target>${maven.compiler.target}</java.target>
									</additionalProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Spring Boot Actuator displays build-related information if a META-INF/build-info.properties file is present -->
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<verbose>true</verbose>
							<dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
							</generateGitPropertiesFilename>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>
			<id>buildDocker-local</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>docker-maven-plugin</artifactId>
							<version>${docker.plugin.version}</version>
							<executions>
								<execution>
									<phase>install</phase>
									<goals>
										<goal>build</goal>
									</goals>
								</execution>
							</executions>
							<configuration>
								<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
								<dockerDirectory>${docker.image.dockerfile.dir}</dockerDirectory>
								<resources>
									<resource>
										<targetPath>/</targetPath>
										<directory>${project.build.directory}</directory>
										<include>${project.build.finalName}.jar</include>
									</resource>
								</resources>
								<buildArgs>
									<ARTIFACT_NAME>${project.build.finalName}</ARTIFACT_NAME>
									<EXPOSED_PORT>${docker.image.exposed.port}</EXPOSED_PORT>
									<DOCKERIZE_VERSION>${docker.image.dockerize.version}</DOCKERIZE_VERSION>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>


		<profile>
			<id>buildDocker</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>docker-maven-plugin</artifactId>
							<version>${docker.plugin.version}</version>
							<executions>
								<execution>
									<phase>install</phase>
									<goals>
										<goal>build</goal>
									</goals>
								</execution>
							</executions>
							<configuration>
								<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
								<dockerDirectory>${docker.image.dockerfile.dir}</dockerDirectory>
								<serverId>docker-hub</serverId>
								<registryUrl>https://index.docker.io/v1/</registryUrl>
								<resources>
									<resource>
										<targetPath>/</targetPath>
										<directory>${project.build.directory}</directory>
										<include>${project.build.finalName}.jar</include>
									</resource>
								</resources>
								<buildArgs>
									<ARTIFACT_NAME>${project.build.finalName}</ARTIFACT_NAME>
									<EXPOSED_PORT>${docker.image.exposed.port}</EXPOSED_PORT>
									<DOCKERIZE_VERSION>${docker.image.dockerize.version}</DOCKERIZE_VERSION>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>